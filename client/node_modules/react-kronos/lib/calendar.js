'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

require('moment-range');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('./constants');

var _nav = require('./nav');

var _nav2 = _interopRequireDefault(_nav);

var _cell = require('./cell');

var _cell2 = _interopRequireDefault(_cell);

var _styledComponent = require('./styled-component');

var _styledComponent2 = _interopRequireDefault(_styledComponent);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Calendar = function (_Component) {
  _inherits(Calendar, _Component);

  function Calendar(props) {
    _classCallCheck(this, Calendar);

    var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props));

    _this.state = {
      windowHeight: window.innerHeight
    };
    return _this;
  }

  _createClass(Calendar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      window.addEventListener('resize', this.updateDimensions.bind(this));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
      this.scrollToHour();
      this.updateDimensions();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (!this.props.above()) {
        this.scrollToHour();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
      window.removeEventListener('resize', this.updateDimensions.bind(this));
    }
  }, {
    key: 'updateDimensions',
    value: function updateDimensions() {
      if (this._isMounted) {
        this.setState({ windowHeight: window.innerHeight });
      }
    }
  }, {
    key: 'scrollToHour',
    value: function scrollToHour() {
      if (this.props.level == 'hours' && this.refs.selected) {
        var selected = _reactDom2.default.findDOMNode(this.refs.selected);
        selected.parentNode.scrollTop = selected.offsetTop - 6;
      }
    }
  }, {
    key: 'onNavigateCell',
    value: function onNavigateCell(datetime) {
      var lvl = _constants.Levels[this.props.level];
      if (lvl.down) this.props.setLevel(lvl.down);
      this.props.onSelect(datetime, !lvl.down, lvl.key);
    }
  }, {
    key: 'onNavigateUp',
    value: function onNavigateUp() {
      var lvl = _constants.Levels[this.props.level];
      if (lvl.up) this.props.setLevel(lvl.up);
    }
  }, {
    key: 'onNavigateLeft',
    value: function onNavigateLeft() {
      var lvl = _constants.Levels[this.props.level].nav;
      this.props.onSelect(this.props.datetime.subtract(lvl.span, lvl.unit));
    }
  }, {
    key: 'onNavigateRight',
    value: function onNavigateRight() {
      var lvl = _constants.Levels[this.props.level].nav;
      this.props.onSelect(this.props.datetime.add(lvl.span, lvl.unit));
    }
  }, {
    key: 'onToday',
    value: function onToday() {
      var lvl = _constants.Levels[this.props.level];
      if ((0, _moment2.default)(this.props.datetime).isSame((0, _moment2.default)(), 'day')) {
        this.props.onSelect((0, _moment2.default)(), !lvl.down);
      } else {
        this.props.onSelect((0, _moment2.default)());
      }
    }
  }, {
    key: 'getTitle',
    value: function getTitle(unit, datetime) {
      datetime = datetime || (0, _moment2.default)();
      switch (unit) {
        case 'years':
          var start = datetime.clone().subtract(4, 'years');
          var end = datetime.clone().add(7, 'years');
          var years = [];

          (0, _moment2.default)().range(start, end).by(_constants.Units.YEAR, function (year) {
            years.push({
              label: year.format('YYYY'),
              selected: year.isSame(datetime, 'year')
            });
          });
          return [years[0].label, years[years.length - 1].label].join('-');

        case 'months':
          return datetime.format('YYYY');

        case 'days':
          return datetime.format('MMMM');

        case 'hours':
          return null;
      }
    }
  }, {
    key: 'getCells',
    value: function getCells(unit, datetime) {
      var _this2 = this;

      datetime = datetime || (0, _moment2.default)();

      var type = unit === 'hours' && this.props.timeStep ? 'minutes' : unit;

      switch (type) {
        case 'years':
          {
            var start = datetime.clone().subtract(4, 'years');
            var end = datetime.clone().add(7, 'years');
            var years = [];
            var format = (0, _get2.default)(this.props, 'options.format.year') || 'YYYY';

            (0, _moment2.default)().range(start, end).by(_constants.Units.YEAR, function (year) {
              years.push({
                moment: year,
                label: year.format(format),
                selected: year.isSame(datetime, 'year')
              });
            });

            return years;
          }

        case 'months':
          {
            var _start = datetime.clone().startOf('year');
            var _end = datetime.clone().endOf('year');
            var months = [];
            var _format = (0, _get2.default)(this.props, 'options.format.month') || 'MMM';

            (0, _moment2.default)().range(_start, _end).by(_constants.Units.MONTH, function (month) {
              months.push({
                moment: month,
                label: month.format(_format),
                selected: month.isSame(datetime, 'month')
              });
            });

            return months;
          }

        case 'days':
          {
            var _start2 = datetime.clone().startOf('month').weekday(0);
            var _end2 = datetime.clone().endOf('month').weekday(6);
            var days = [];
            var _format2 = (0, _get2.default)(this.props, 'options.format.day') || 'D';

            _moment2.default.weekdaysMin().forEach(function (day) {
              days.push({
                label: day,
                header: true
              });
            });

            (0, _moment2.default)().range(_start2, _end2).by(_constants.Units.DAY, function (day) {
              days.push({
                moment: day,
                label: day.format(_format2),
                past: day.isBefore(datetime, 'month'),
                future: day.isAfter(datetime, 'month'),
                selected: day.isSame(datetime, 'day'),
                today: day.isSame((0, _moment2.default)(), 'day')
              });
            });

            return days;
          }

        case 'hours':
          {
            var _start3 = datetime.clone().startOf('day');
            var _end3 = datetime.clone().endOf('day');
            var hours = [];
            var closeBefore = datetime.clone().subtract(31, 'minutes');
            var closeAfter = datetime.clone().add(31, 'minutes');
            var _format3 = (0, _get2.default)(this.props, 'options.format.hour') || 'HH:mm';

            (0, _moment2.default)().range(_start3, _end3).by(_constants.Units.HOUR, function (hour) {
              hours.push({
                moment: hour,
                label: hour.format(_format3),
                selected: hour.isSame(datetime, 'minute'),
                nearestBefore: hour.isBetween(closeBefore, datetime),
                nearestAfter: hour.isBetween(datetime, closeAfter)
              });
              var halfHour = hour.clone().add(30, 'minutes');
              hours.push({
                moment: halfHour,
                label: halfHour.format(_format3),
                selected: halfHour.isSame(datetime, 'minute'),
                nearestBefore: halfHour.isBetween(closeBefore, datetime),
                nearestAfter: halfHour.isBetween(datetime, closeAfter)
              });
            });

            return hours;
          }

        case 'minutes':
          {
            var _start4 = datetime.clone().startOf('day');
            var _end4 = datetime.clone().endOf('day');
            var minutes = [];
            var _format4 = (0, _get2.default)(this.props, 'options.format.hour') || 'HH:mm';

            (0, _moment2.default)().range(_start4, _end4).by(_constants.Units.MINUTE, function (minute) {
              var _minutes = minute.minutes();

              if (_minutes === 0) {
                minutes.push({
                  moment: minute,
                  label: minute.format(_format4),
                  selected: minute.isSame(datetime, 'minute')
                });
              } else if (_minutes % _this2.props.timeStep === 0) {
                minutes.push({
                  moment: minute,
                  label: minute.format(_format4),
                  selected: minute.isSame(datetime, 'minute')
                });
              }
            });

            return minutes;
          }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          level = _props.level,
          datetime = _props.datetime,
          classes = _props.classes,
          inputRect = _props.inputRect,
          hideOutsideDateTimes = _props.hideOutsideDateTimes;


      var calendarClass = classes.calendarBelow;

      if (inputRect.top + inputRect.height + 237 > this.state.windowHeight) {
        calendarClass = classes.calendarAbove;
      }

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(this.props.className, calendarClass),
          onMouseDown: function onMouseDown(e) {
            return _this3.props.above(true);
          },
          onMouseUp: function onMouseUp(e) {
            return _this3.props.above(false);
          },
          style: this.props.style
        },
        level != 'hours' && _react2.default.createElement(_nav2.default, {
          instance: this.props.instance,
          onPrev: this.onNavigateLeft.bind(this),
          onNext: this.onNavigateRight.bind(this),
          onTitle: this.onNavigateUp.bind(this),
          title: this.getTitle(level, datetime)
        }),
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(classes.grid, level) },
          this.getCells(level, datetime).map(function (cell, i) {
            var type = void 0;
            switch (true) {
              case cell.header:
                type = 'header';
                break;
              case cell.past:
                type = 'past';
                break;
              case cell.future:
                type = 'future';
                break;
              default:
                type = 'base';
                break;
            }

            if (level === 'hours' && hideOutsideDateTimes && !_this3.props.validate(cell.moment, level)) {
              return null;
            }

            return _react2.default.createElement(_cell2.default, {
              key: i,
              ref: cell.selected || cell.nearestBefore ? 'selected' : null,
              label: cell.label,
              level: level,
              type: type,
              selected: cell.selected,
              today: cell.today,
              moment: cell.moment,
              onClick: _this3.onNavigateCell.bind(_this3),
              classes: classes,
              invalid: _this3.props.validate(cell.moment, level)
            });
          }).filter(function (cell) {
            return cell != null;
          }),
          level != 'hours' && _react2.default.createElement(
            'div',
            { className: classes.today, onClick: this.onToday.bind(this) },
            (0, _get2.default)(this.props, 'options.format.today') || 'Today'
          )
        )
      );
    }
  }]);

  return Calendar;
}(_react.Component);

Calendar.propTypes = {
  datetime: _propTypes2.default.object.isRequired,
  onSelect: _propTypes2.default.func.isRequired,
  level: _propTypes2.default.string.isRequired,
  setLevel: _propTypes2.default.func.isRequired,
  onMouseDown: _propTypes2.default.func,
  onMouseUp: _propTypes2.default.func
};
Calendar._isMounted = false;
exports.default = (0, _styledComponent2.default)(Calendar, function (props, instance) {
  return (0, _styles2.default)('calendar', props, instance);
});