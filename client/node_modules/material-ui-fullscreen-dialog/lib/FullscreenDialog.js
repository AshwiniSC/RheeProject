'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = FullscreenDialog;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _AppBar = require('material-ui/AppBar');

var _AppBar2 = _interopRequireDefault(_AppBar);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _close = require('material-ui/svg-icons/navigation/close');

var _close2 = _interopRequireDefault(_close);

var _FullscreenDialogFrame = require('./FullscreenDialogFrame');

var _FullscreenDialogFrame2 = _interopRequireDefault(_FullscreenDialogFrame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getStyles = function getStyles(props, theme) {
  return {
    root: {
      display: 'flex',
      flexDirection: 'column'
    },
    appBar: {
      height: (props.appBarStyle ? props.appBarStyle.height : null) || theme.appBar.height
    },
    container: {
      flex: 1,
      overflow: 'auto'
    }
  };
};

function FullscreenDialog(props, _ref) {
  var muiTheme = _ref.muiTheme;

  var styles = getStyles(props, muiTheme);

  var actionButton = props.actionButton,
      appBarStyle = props.appBarStyle,
      children = props.children,
      closeIcon = props.closeIcon,
      containerStyle = props.containerStyle,
      onRequestClose = props.onRequestClose,
      open = props.open,
      style = props.style,
      title = props.title,
      titleStyle = props.titleStyle;


  return _react2.default.createElement(
    _FullscreenDialogFrame2.default,
    {
      open: open,
      style: _extends({}, style, styles.root)
    },
    _react2.default.createElement(_AppBar2.default, {
      title: title,
      titleStyle: titleStyle,
      style: _extends({}, styles.appBar, appBarStyle),
      iconElementLeft: _react2.default.createElement(
        _IconButton2.default,
        { onTouchTap: onRequestClose },
        closeIcon || _react2.default.createElement(_close2.default, null)
      ),
      iconElementRight: actionButton
    }),
    _react2.default.createElement(
      'div',
      { style: _extends({}, styles.container, containerStyle) },
      children
    )
  );
}

FullscreenDialog.propTypes = {
  actionButton: _react.PropTypes.node,
  appBarStyle: _react.PropTypes.object,
  children: _react.PropTypes.node,
  closeIcon: _react.PropTypes.node,
  containerStyle: _react.PropTypes.object,
  onRequestClose: _react.PropTypes.func,
  open: _react.PropTypes.bool.isRequired,
  style: _react.PropTypes.object,
  title: _react.PropTypes.string,
  titleStyle: _react.PropTypes.object
};

FullscreenDialog.contextTypes = {
  muiTheme: _react.PropTypes.object
};